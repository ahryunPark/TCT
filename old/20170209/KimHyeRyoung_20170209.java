import java.util.Scanner;

public class KimHyeRyoung_20170209 {
	
	/*
	 [2017.02.09] 오늘의 문제
		 오름차순으로 한 줄로 놓여있는 20장의 카드에 대해 10개의 구간이 주어지면, 
		 주어진 구간의 순서대로 아래의 규칙에 따라 순서를 뒤집는 작업을 연속해서 처리한 뒤 마지막 카드들의 배치를 구하는 프로그램을 작성하시오.
		
		 1부터 20까지 숫자가 하나씩 쓰인 20장의 카드가 오름차순으로 한 줄로 놓여있다. 
	 	 각 카드의 위치는 카드 위에 적힌 숫자와 같이 1부터 20까지로 나타낸다.
		  
		 다음과 같은 규칙으로 카드의 위치를 바꾼다
		 구간 [a,b] (단, 1≤a≤b≤20) 가 주어지면 위치 a부터 위치 b까지의 카드를 현재의 역순으로 놓는다.
		 예를 들어, 구간이 [5,10]으로 주어진다면, 위치 5부터 위치 10까지의 카드 5,6,7,8,9,10을 역순으 로 하여 10,9,8,7,6,5로 놓는다. 
		 --> 그림순서 : 1,2,3,4,10,9,8,7,6,5,11,12,13,14,15,16,17,18,19,20.
		 이 상태에서 구간 [9,13]이 다시 주어진다면, 위치 9부터 위치 13까지의 카드 6,5,11,12,13 을 역순으로 하여 13,12,11,5,6으로 놓는다. 
		 --> 그림순서.: 1,2,3,4,10,9,8,7,13,12,11,5,6,14,15,16,17,18,19,20
		 
		[출력 예시(3개 구간일 경우)]
		입력구간 :        
		[3,7] 12765438910...
		[4,6] 12745638910...
		[5,5] 12745638910...
		결과 : 최종 카드배치는 [1,2,7,4,5,6,3,8,9,10,11,12,13,14,15,16,17,18,19,20] 입니다.
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner in = new Scanner(System.in);
		int start = 0;
		int end = 0;
		int[] cardArr = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20};
		int[] arr = cardArr;
		
		int cnt = 1;
		while ( cnt <= 3 ) {
			System.out.print("구간 시작지점 : ");
			start = in.nextInt();
			System.out.print("구간 종료지점 : ");
			end = in.nextInt();
			
			System.out.println("첫번째 입력값 : " + start + ", 두번째 입력값 : " + end);
			if ( start > end ) {
				System.out.println("첫번째 입력하는 값이 두번째 입력하는 값보다 작아야 합니다. 다시 입력하세요.");
			} else if ( start > 20 || end > 20) {
				System.out.println("입력하는 두 수는 20보다 작아야 합니다.다시 입력하세요.");
			} else if ( start <= 0 || end <= 0 ) {
				System.out.println("입력하는 두 수는 0보다 커야 합니다. 다시 입력하세요.");
			} else {
				cnt++;
				for ( int idx = 0 ; idx < (end-start+1)/2 ; idx++ ) {
					int temp = arr[start+idx-1];
					arr[start+idx-1] = arr[end-idx-1];
					arr[end-idx-1] = temp;
				}
			}
		}
		
		System.out.print("결과 : 최종 카드배치는 [");
		for ( int knx = 0 ; knx < arr.length ; knx++ ) {
			if ( knx == arr.length - 1 ) {
				System.out.print(arr[knx]);
			} else {
				System.out.print(arr[knx] + ",");
			}
		}
		System.out.print("] 입니다.");
		
	}
}
